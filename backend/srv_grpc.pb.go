// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: srv.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBProxySrvClient is the client API for DBProxySrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBProxySrvClient interface {
	DescribeUserList(ctx context.Context, in *DescribeUserListRequest, opts ...grpc.CallOption) (*DescribeUserListResponse, error)
}

type dBProxySrvClient struct {
	cc grpc.ClientConnInterface
}

func NewDBProxySrvClient(cc grpc.ClientConnInterface) DBProxySrvClient {
	return &dBProxySrvClient{cc}
}

func (c *dBProxySrvClient) DescribeUserList(ctx context.Context, in *DescribeUserListRequest, opts ...grpc.CallOption) (*DescribeUserListResponse, error) {
	out := new(DescribeUserListResponse)
	err := c.cc.Invoke(ctx, "/backend.DBProxySrv/DescribeUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBProxySrvServer is the server API for DBProxySrv service.
// All implementations must embed UnimplementedDBProxySrvServer
// for forward compatibility
type DBProxySrvServer interface {
	DescribeUserList(context.Context, *DescribeUserListRequest) (*DescribeUserListResponse, error)
	mustEmbedUnimplementedDBProxySrvServer()
}

// UnimplementedDBProxySrvServer must be embedded to have forward compatible implementations.
type UnimplementedDBProxySrvServer struct {
}

func (UnimplementedDBProxySrvServer) DescribeUserList(context.Context, *DescribeUserListRequest) (*DescribeUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUserList not implemented")
}
func (UnimplementedDBProxySrvServer) mustEmbedUnimplementedDBProxySrvServer() {}

// UnsafeDBProxySrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBProxySrvServer will
// result in compilation errors.
type UnsafeDBProxySrvServer interface {
	mustEmbedUnimplementedDBProxySrvServer()
}

func RegisterDBProxySrvServer(s grpc.ServiceRegistrar, srv DBProxySrvServer) {
	s.RegisterService(&DBProxySrv_ServiceDesc, srv)
}

func _DBProxySrv_DescribeUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxySrvServer).DescribeUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.DBProxySrv/DescribeUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxySrvServer).DescribeUserList(ctx, req.(*DescribeUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBProxySrv_ServiceDesc is the grpc.ServiceDesc for DBProxySrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBProxySrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.DBProxySrv",
	HandlerType: (*DBProxySrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeUserList",
			Handler:    _DBProxySrv_DescribeUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv.proto",
}
